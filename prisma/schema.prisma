datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// # Auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String

  provider          String
  providerAccountId String

  refresh_token     String?  @db.Text
  access_token      String?  @db.Text

  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  onboardingStarted Boolean @default(false)
  onboardingCompleted Boolean @default(false)

  accounts Account[]
  sessions Session[]

  invited Boolean @default(false)
  pendingInvite Boolean @default(true)
  invitedBy String?

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}


// # Quakes locations
model QuakeLocation {
  id        String  @id @default(cuid())
  mag       Float   // Magnitude
  place     String  // Location description
  time      BigInt  // Timestamp of the earthquake
  updated   BigInt  // Timestamp of last update


  url       String  // URL for earthquake information
  detail    String  // URL for more details from USGS
  felt      Int?    // Felt reports (nullable)
  cdi       Int?    // Community Internet Intensity Map reports (nullable)
  mmi       Float?  // Moment Magnitude Intensity (nullable)
  alert     String? // Earthquake alert level (nullable)
  status    String  // Earthquake status
  tsunami   Int     // Tsunami indicator
  sig       Int     // Earthquake significance
  net       String  // Network code
  code      String  // Event code

  ids       String  // Comma-separated list of event IDs
  sources   String  // Comma-separated list of event sources
  types     String  // Comma-separated list of event types
  nst       Int?    // Number of seismic stations (nullable)
  dmin      Float?  // Minimum distance to earthquake (nullable)

  
  rms       Float   // Root Mean Square of the earthquake
  gap       Int?    // Gap between azimuthally adjacent stations (nullable)
  magType   String  // Type of magnitude
  type      String  // Type of event (e.g., earthquake)
  title     String  // Title/description of the event
  longitude Float  // Longitude
  latitude  Float  // Latitude
}