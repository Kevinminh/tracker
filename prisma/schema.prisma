datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// # Auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String

  provider          String
  providerAccountId String

  refresh_token     String?  @db.Text
  access_token      String?  @db.Text

  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  favorites Favorite[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}


// # Quakes locations
model QuakeLocation {
  id String @id @default(cuid())

  mag Float // Magnitude
  place String // Location description
  time BigInt // Timestamp of the earthquake
  updated BigInt // Timestamp of last update
  url String // URL for earthquake information
  detail String // URL for more details from USGS
  felt Int? // Felt reports (nullable)
  cdi Int? // Community Internet Intensity Map reports (nullable)

  magType   String  // Type of magnitude
  type      String  // Type of event (e.g., earthquake)
  title     String  // Title/description of the event
  longitude Float  
  latitude  Float  

  favorites Favorite[]

  createdAt         DateTime @default(now()) 
  updatedAt         DateTime @default(now()) 

}

model Favorite {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  quakeLocationId String
  quakeLocation QuakeLocation @relation(fields: [quakeLocationId], references: [id], onDelete: Cascade) 

  createdAt         DateTime @default(now()) 
  updatedAt         DateTime @default(now()) 


  @@index([userId])
  @@index([quakeLocationId])

}